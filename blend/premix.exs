# This file is autogenerated by blend package.
#
# Run `mix blend.premix` to update it's contents after
# each blend package version update.

maybe_put_env = fn varname, value ->
  System.put_env(varname, System.get_env(varname, value))
end

existing_blend = fn name ->
  Code.eval_file("blend.exs")
  |> elem(0)
  |> Map.fetch!(String.to_atom(name))
end

blend = System.get_env("BLEND")

if blend && String.length(blend) > 0 && existing_blend.(blend) do
  maybe_put_env.("MIX_LOCKFILE", "blend/#{blend}.mix.lock")
  maybe_put_env.("MIX_DEPS_PATH", "blend/deps/#{blend}")
  maybe_put_env.("MIX_BUILD_ROOT", "blend/_build/#{blend}")
end

defmodule Blend.Premix do
  def patch_project(project) do
    Keyword.merge(project, maybe_lockfile_option())
  end

  def patch_deps(mix_deps) do
    blend = System.get_env("BLEND")

    case blend do
      nil -> mix_deps
      "" -> mix_deps
      blend -> merge_deps(mix_deps, blend_deps(blend))
    end
  end

  defp merge_deps(deps1, deps2) do
    Enum.reduce(deps2, deps1, fn dep, acc ->
      List.keystore(acc, elem(dep, 0), 0, dep)
    end)
  end

  defp blend_deps(name) do
    {blends, []} = Code.eval_file("blend.exs")
    Map.fetch!(blends, String.to_atom(name))
  end

  defp maybe_lockfile_option() do
    case System.get_env("MIX_LOCKFILE") do
      nil -> []
      "" -> []
      lockfile -> [lockfile: lockfile]
    end
  end
end
